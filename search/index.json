[{"content":"一. 本次讲解\n​\t管理员查看评论列表、 用户登录后显示商家列表、选择商家进入菜单列表、查看商家评论、商家查看评论\n二. 代码讲解：\n​\t1管理员查看评论列表\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 @app.route(\u0026#39;/adminCommentList\u0026#39;, methods=[\u0026#39;GET\u0026#39;, \u0026#39;POST\u0026#39;]) def adminCommentPage(): msg = \u0026#34;\u0026#34;# 初始化一个空的消息变量 if request.method == \u0026#39;GET\u0026#39;: # 如果请求方法是GET（即加载页面） msg = \u0026#34;\u0026#34;# 重置消息 # 连接数据库 db = pymysql.connect(host=\u0026#34;localhost\u0026#34;, user=\u0026#34;root\u0026#34;,port=port, password=mysql_pwd, database=db_name,charset=\u0026#39;utf8\u0026#39;) # 创建一个cursor对象来执行SQL查询 cursor = db.cursor() try: # 尝试使用数据库“appDB” cursor.execute(\u0026#34;use appDB\u0026#34;) except: print(\u0026#34;Error: unable to use database!\u0026#34;) # 执行SQL查询，获取所有已完成且文本内容不为空的评论 sql = \u0026#34;SELECT * FROM ORDER_COMMENT WHERE isFinished = 1 and text \u0026lt;\u0026gt; \u0026#39;\u0026#39;\u0026#34; # 执行查询 cursor.execute(sql) # 获取查询结果 res = cursor.fetchall() # 如果有查询结果（即有评论） if len(res) != 0: msg = \u0026#34;done\u0026#34; print(msg) return render_template(\u0026#39;adminCommentList.html\u0026#39;, username=username, result=res, messages=msg) else: # 如果没有查询结果（没有评论） print(\u0026#34;NULL\u0026#34;) msg = \u0026#34;none\u0026#34; return render_template(\u0026#39;adminCommentList.html\u0026#39;, username=username, messages=msg) # 如果请求方法是POST（即用户提交了表单） elif request.form[\u0026#34;action\u0026#34;] == \u0026#34;按评分升序排列\u0026#34;:# 如果提交的表单动作是\u0026#34;按评分升序排列\u0026#34; db = pymysql.connect(host=\u0026#34;localhost\u0026#34;, user=\u0026#34;root\u0026#34;,port=port, password=mysql_pwd, database=db_name,charset=\u0026#39;utf8\u0026#39;) cursor = db.cursor() try: cursor.execute(\u0026#34;use appDB\u0026#34;) except: print(\u0026#34;Error: unable to use database!\u0026#34;) # 执行SQL查询，按评分升序排列获取所有已完成且文本不为空的评论 sql = \u0026#34;SELECT * FROM ORDER_COMMENT WHERE isFinished = 1 AND text is not null Order BY c_rank\u0026#34; cursor.execute(sql) res = cursor.fetchall() print(len(res)) if len(res): #如果有查询结果（即有评论） msg = \u0026#34;done\u0026#34; print(msg) return render_template(\u0026#39;adminCommentList.html\u0026#39;, username=username, result=res, messages=msg) else: # 如果没有查询结果（没有评论） print(\u0026#34;NULL\u0026#34;) msg = \u0026#34;none\u0026#34; return render_template(\u0026#39;adminCommentList.html\u0026#39;, username=username, messages=msg) ​\t2.用户登录后显示商家列表\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 @app.route(\u0026#39;/UserRestList\u0026#39;,methods=[\u0026#39;GET\u0026#39;, \u0026#39;POST\u0026#39;]) def UserRestListPage(): msg = \u0026#34;\u0026#34; # 如果请求方法是GET（即加载页面） if request.method == \u0026#39;GET\u0026#39;: msg = \u0026#34;\u0026#34; # 连接数据库 db = pymysql.connect(host=\u0026#34;localhost\u0026#34;, user=\u0026#34;root\u0026#34;,port=port, password=mysql_pwd, database=db_name,charset=\u0026#39;utf8\u0026#39;) cursor = db.cursor() try: cursor.execute(\u0026#34;use appDB\u0026#34;) except: print(\u0026#34;Error: unable to use database!\u0026#34;) # 执行SQL查询，获取所有餐厅信息 sql = \u0026#34;SELECT * FROM RESTAURANT\u0026#34; cursor.execute(sql) res = cursor.fetchall() # 如果有查询结果（即有餐厅数据） if len(res) != 0: msg = \u0026#34;done\u0026#34; print(msg) return render_template(\u0026#39;UserRestList.html\u0026#39;, username=username, result=res, messages=msg) else: # 如果没有查询结果（没有餐厅数据） print(\u0026#34;NULL\u0026#34;) msg = \u0026#34;none\u0026#34; return render_template(\u0026#39;UserRestList.html\u0026#39;, username=username, messages=msg) ​\t3.选择商家进入菜单列表\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 @app.route(\u0026#39;/Menu\u0026#39;,methods=[\u0026#39;GET\u0026#39;, \u0026#39;POST\u0026#39;]) def menu(): msg = \u0026#34;\u0026#34; # 声明restaurant为全局变量，方便在不同请求之间共享数据 global restaurant # 如果表单动作是\u0026#34;进入本店\u0026#34; if request.form[\u0026#34;action\u0026#34;] == \u0026#34;进入本店\u0026#34;: # 获取用户选择的餐厅名称 restaurant = request.form[\u0026#39;restaurant\u0026#39;] msg = \u0026#34;\u0026#34; # 连接数据库 db = pymysql.connect(host=\u0026#34;localhost\u0026#34;, user=\u0026#34;root\u0026#34;,port=port, password=mysql_pwd, database=db_name,charset=\u0026#39;utf8\u0026#39;) cursor = db.cursor() try: cursor.execute(\u0026#34;use appDB\u0026#34;) except: print(\u0026#34;Error: unable to use database!\u0026#34;) # 查询餐厅的所有菜品 sql = \u0026#34;SELECT * FROM DISHES WHERE restaurant = \u0026#39;%s\u0026#39;\u0026#34; % restaurant cursor.execute(sql) res = cursor.fetchall() # 如果有查询结果（即有菜品） if len(res) != 0: msg = \u0026#34;done\u0026#34; return render_template(\u0026#39;Menu.html\u0026#39;, username=username, RESTAURANT=restaurant, result=res, messages=msg) else:# 如果没有查询结果（没有菜品） msg = \u0026#34;none\u0026#34; return render_template(\u0026#39;Menu.html\u0026#39;, username=username, RESTAURANT=restaurant, messages=msg) # 如果表单动作是\u0026#34;特色菜\u0026#34; elif request.form[\u0026#34;action\u0026#34;] == \u0026#34;特色菜\u0026#34;: db = pymysql.connect(host=\u0026#34;localhost\u0026#34;, user=\u0026#34;root\u0026#34;, port=port,password=mysql_pwd, database=db_name,charset=\u0026#39;utf8\u0026#39;) cursor = db.cursor() try: cursor.execute(\u0026#34;use appDB\u0026#34;) except: print(\u0026#34;Error: unable to use database!\u0026#34;) # 查询餐厅的特色菜（isSpecialty = 1表示是特色菜） sql = \u0026#34;SELECT * FROM DISHES WHERE restaurant = \u0026#39;%s\u0026#39; AND isSpecialty = 1\u0026#34; % restaurant cursor.execute(sql) res = cursor.fetchall() # 如果有查询结果（即有特色菜） if len(res): msg = \u0026#34;done\u0026#34; return render_template(\u0026#39;Menu.html\u0026#39;, username=username, RESTAURANT=restaurant, result=res, messages=msg) else: # 如果没有查询结果（没有特色菜） msg = \u0026#34;none\u0026#34; return render_template(\u0026#39;Menu.html\u0026#39;, username=username, RESTAURANT=restaurant, messages=msg) # 如果表单动作是\u0026#34;按销量排序\u0026#34; elif request.form[\u0026#34;action\u0026#34;] == \u0026#34;按销量排序\u0026#34;: db = pymysql.connect(host=\u0026#34;localhost\u0026#34;, user=\u0026#34;root\u0026#34;, port=port,password=mysql_pwd, database=db_name,charset=\u0026#39;utf8\u0026#39;) cursor = db.cursor() try: cursor.execute(\u0026#34;use appDB\u0026#34;) except: print(\u0026#34;Error: unable to use database!\u0026#34;) # 查询餐厅的菜品，并按销量降序排序 sql = \u0026#34;SELECT * FROM DISHES WHERE restaurant = \u0026#39;%s\u0026#39; Order BY sales DESC\u0026#34; % restaurant cursor.execute(sql) res = cursor.fetchall() # 如果有查询结果（即有菜品） if len(res): msg = \u0026#34;done\u0026#34; return render_template(\u0026#39;Menu.html\u0026#39;, username=username, RESTAURANT=restaurant, result=res, messages=msg) else: # 如果没有查询结果（没有菜品） msg = \u0026#34;none\u0026#34; return render_template(\u0026#39;Menu.html\u0026#39;, username=username, RESTAURANT=restaurant, messages=msg) # 如果表单动作是\u0026#34;按价格排序\u0026#34; elif request.form[\u0026#34;action\u0026#34;] == \u0026#34;按价格排序\u0026#34;: db = pymysql.connect(host=\u0026#34;localhost\u0026#34;, user=\u0026#34;root\u0026#34;, port=port,password=mysql_pwd, database=db_name,charset=\u0026#39;utf8\u0026#39;) cursor = db.cursor() try: cursor.execute(\u0026#34;use appDB\u0026#34;) except: print(\u0026#34;Error: unable to use database!\u0026#34;) # 查询餐厅的菜品，并按价格降序排序 sql = \u0026#34;SELECT * FROM DISHES WHERE restaurant = \u0026#39;%s\u0026#39; Order BY price DESC\u0026#34; % restaurant cursor.execute(sql) res = cursor.fetchall() if len(res): # 如果有查询结果（即有菜品） msg = \u0026#34;done\u0026#34; return render_template(\u0026#39;Menu.html\u0026#39;, username=username, RESTAURANT=restaurant, result=res, messages=msg) else: # 如果没有查询结果（没有菜品） msg = \u0026#34;none\u0026#34; return render_template(\u0026#39;Menu.html\u0026#39;, username=username, RESTAURANT=restaurant, messages=msg) ​\t4.查看商家评论\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 @app.route(\u0026#39;/ResComment\u0026#39;,methods=[\u0026#39;GET\u0026#39;,\u0026#39;POST\u0026#39;]) def resComment(): msg = \u0026#34;\u0026#34; global restaurant # 如果表单动作是\u0026#34;查看评价\u0026#34; if request.form[\u0026#34;action\u0026#34;] == \u0026#34;查看评价\u0026#34;: restaurant = request.form[\u0026#39;restaurant\u0026#39;] msg = \u0026#34;\u0026#34; # 连接数据库 db = pymysql.connect(host=\u0026#34;localhost\u0026#34;, user=\u0026#34;root\u0026#34;, port=port,password=mysql_pwd, database=db_name,charset=\u0026#39;utf8\u0026#39;) cursor = db.cursor() try: cursor.execute(\u0026#34;use appDB\u0026#34;) except: print(\u0026#34;Error: unable to use database!\u0026#34;) # 查询餐厅的已完成评价（isFinished = 1表示评价已完成，text \u0026lt;\u0026gt; \u0026#39;\u0026#39;表示评价内容不为空） sql = \u0026#34;SELECT * FROM ORDER_COMMENT WHERE restaurant = \u0026#39;%s\u0026#39; AND isFinished = 1 AND text \u0026lt;\u0026gt; \u0026#39;\u0026#39; \u0026#34;% restaurant cursor.execute(sql) res = cursor.fetchall() # 如果查询到评价数据 if len(res) != 0: msg = \u0026#34;done\u0026#34; return render_template(\u0026#39;ResComment.html\u0026#39;, username=username, RESTAURANT=restaurant, result=res, messages=msg) else:# 如果没有查询结果（没有评价数据） msg = \u0026#34;none\u0026#34; return render_template(\u0026#39;ResComment.html\u0026#39;, username=username, RESTAURANT=restaurant, messages=msg) ​\t5.商家查看评论\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 @app.route(\u0026#39;/ResCommentList\u0026#39;, methods=[\u0026#39;GET\u0026#39;, \u0026#39;POST\u0026#39;]) def ResCommentList(): msg = \u0026#34;\u0026#34; # 获取当前用户名作为餐厅名称（假设restaurant = username） restaurant=username # 连接数据库 db = pymysql.connect(host=\u0026#34;localhost\u0026#34;, user=\u0026#34;root\u0026#34;, port=port,password=mysql_pwd, database=db_name,charset=\u0026#39;utf8\u0026#39;) cursor = db.cursor() try: cursor.execute(\u0026#34;use appDB\u0026#34;) except: print(\u0026#34;Error: unable to use database!\u0026#34;) # 查询餐厅的已完成评价（isFinished = 1表示评价已完成，text \u0026lt;\u0026gt; \u0026#39;\u0026#39;表示评价内容不为空） sql = \u0026#34;SELECT * FROM ORDER_COMMENT WHERE restaurant = \u0026#39;%s\u0026#39; AND isFinished = 1 AND text \u0026lt;\u0026gt; \u0026#39;\u0026#39; \u0026#34; % restaurant cursor.execute(sql) res = cursor.fetchall() # 如果查询到评价数据 if len(res) != 0: msg = \u0026#34;done\u0026#34; return render_template(\u0026#39;ResCommentList.html\u0026#39;, username=username, RESTAURANT=restaurant, result=res,messages=msg) # 如果没有查询结果（没有评价数据） else: msg = \u0026#34;none\u0026#34; return render_template(\u0026#39;ResCommentList.html\u0026#39;, username=username, RESTAURANT=restaurant, messages=msg) ","date":"2024-11-11T15:24:00+08:00","permalink":"https://1878247293.github.io/p/%E5%A4%96%E5%8D%96%E8%AE%A2%E9%A4%90%E7%B3%BB%E7%BB%9F-%E4%B8%89/","title":"外卖订餐系统-（三）"},{"content":"一. 本次讲解\n​\t首页，登陆和注册\n二. 代码讲解：\n​\t1.首页\n1 2 3 4 5 @app.route(\u0026#39;/\u0026#39;) @app.route(\u0026#39;/index\u0026#39;) # 首页路由 def indexpage(): return render_template(\u0026#39;index.html\u0026#39;) ​\t2.注册\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 # 注册页面的路由和逻辑 @app.route(\u0026#39;/register\u0026#39;, methods=[\u0026#39;GET\u0026#39;, \u0026#39;POST\u0026#39;]) def registerPage(): global username global userRole msg = \u0026#34;\u0026#34; # GET方法返回注册页面 if request.method == \u0026#39;GET\u0026#39;: return render_template(\u0026#39;Register.html\u0026#39;) # POST方法处理注册逻辑 if request.method == \u0026#39;POST\u0026#39;: username = request.form.get(\u0026#39;username\u0026#39;) password = request.form.get(\u0026#39;password\u0026#39;) phone = request.form.get(\u0026#39;phone\u0026#39;) addr = request.form.get(\u0026#39;addr\u0026#39;) userRole = request.form.get(\u0026#39;userRole\u0026#39;) print(userRole) print(username) # 连接数据库，默认数据库用户名root，密码空 db = pymysql.connect(host=\u0026#34;localhost\u0026#34;, user=\u0026#34;root\u0026#34;, port=port,password=mysql_pwd, database=db_name,charset=\u0026#39;utf8\u0026#39;) # 根据用户角色分别注册 if userRole == \u0026#39;RESTAURANT\u0026#39;:#商家 cursor = db.cursor() try: cursor.execute(\u0026#34;use appDB\u0026#34;) except: print(\u0026#34;Error: unable to use database!\u0026#34;) # 检查商家是否已存在 sql1 = \u0026#34;SELECT * from RESTAURANT where username = \u0026#39;{}\u0026#39; \u0026#34;.format(username) cursor.execute(sql1) db.commit() res1 = cursor.fetchall() num = 0 for row in res1: num = num + 1 # 如果商家已注册，返回注册失败信息 if num == 1: print(\u0026#34;失败！商家已注册！\u0026#34;) msg = \u0026#34;fail1\u0026#34; else: # 插入新商家记录 sql2 = \u0026#34;insert into RESTAURANT (username, password, address, phone) values (\u0026#39;{}\u0026#39;, \u0026#39;{}\u0026#39;, \u0026#39;{}\u0026#39;, \u0026#39;{}\u0026#39;) \u0026#34;.format(username, password, addr, phone) try: cursor.execute(sql2) db.commit() print(\u0026#34;商家注册成功\u0026#34;) msg = \u0026#34;done1\u0026#34; except ValueError as e: print(\u0026#34;---\u0026gt;\u0026#34;, e) print(\u0026#34;注册出错，失败\u0026#34;) msg = \u0026#34;fail1\u0026#34; return render_template(\u0026#39;Register.html\u0026#39;, messages=msg, username=username, userRole=userRole) elif userRole == \u0026#39;CUSTOMER\u0026#39;:#客户 cursor = db.cursor() try: cursor.execute(\u0026#34;use appDB\u0026#34;) except: print(\u0026#34;Error: unable to use database!\u0026#34;) # 检查客户是否已存在 sql1 = \u0026#34;SELECT * from CUSTOMER where username = \u0026#39;{}\u0026#39;\u0026#34;.format(username) cursor.execute(sql1) db.commit() res1 = cursor.fetchall() num = 0 for row in res1: num = num + 1 # 如果用户已注册，返回注册失败信息 if num == 1: print(\u0026#34;用户已注册！请直接登录。\u0026#34;) msg = \u0026#34;fail2\u0026#34; else:# 插入新用户记录 sql2 = \u0026#34;insert into CUSTOMER (username, password, address, phone) values (\u0026#39;{}\u0026#39;, \u0026#39;{}\u0026#39;, \u0026#39;{}\u0026#39;, \u0026#39;{}\u0026#39;) \u0026#34;.format(username, password, addr, phone) try: cursor.execute(sql2) db.commit() print(\u0026#34;商家注册成功\u0026#34;) msg = \u0026#34;done2\u0026#34; except ValueError as e: print(\u0026#34;---\u0026gt;\u0026#34;, e) print(\u0026#34;注册出错，失败\u0026#34;) msg = \u0026#34;fail2\u0026#34; return render_template(\u0026#39;Register.html\u0026#39;, messages=msg, username=username, userRole=userRole) ​\t3.登陆\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 # 登录页面的路由和逻辑 @app.route(\u0026#39;/logIn\u0026#39;, methods=[\u0026#39;GET\u0026#39;, \u0026#39;POST\u0026#39;]) def logInPage(): global username global userRole msg = \u0026#34;\u0026#34; # GET方法返回登陆页面 if request.method == \u0026#39;GET\u0026#39;: return render_template(\u0026#39;logIn.html\u0026#39;) # POST方法处理登陆逻辑 if request.method == \u0026#39;POST\u0026#39;: username = request.form.get(\u0026#39;username\u0026#39;) password = request.form.get(\u0026#39;password\u0026#39;) userRole = request.form.get(\u0026#39;userRole\u0026#39;) print(userRole) print(username) # 连接数据库，默认数据库用户名root，密码空 db = pymysql.connect(host=\u0026#34;localhost\u0026#34;, user=\u0026#34;root\u0026#34;,port=port, password=mysql_pwd, database=db_name,charset=\u0026#39;utf8\u0026#39;) if userRole == \u0026#39;ADMIN\u0026#39;:#管理员 cursor = db.cursor() try: cursor.execute(\u0026#34;use appDB\u0026#34;) except: print(\u0026#34;Error: unable to use database!\u0026#34;) sql = \u0026#34;SELECT * from ADMIN where username = \u0026#39;{}\u0026#39; and password=\u0026#39;{}\u0026#39;\u0026#34;.format(username, password) cursor.execute(sql) db.commit() res = cursor.fetchall() num = 0 for row in res: num = num + 1 # 如果存在该管理员且密码正确 if num == 1: print(\u0026#34;登录成功！欢迎管理员！\u0026#34;) msg = \u0026#34;done1\u0026#34; else: print(\u0026#34;您没有管理员权限或登录信息出错。\u0026#34;) msg = \u0026#34;fail1\u0026#34; return render_template(\u0026#39;logIn.html\u0026#39;, messages=msg, username=username, userRole=userRole) elif userRole == \u0026#39;RESTAURANT\u0026#39;:#商家 cursor = db.cursor() try: cursor.execute(\u0026#34;use appDB\u0026#34;) except: print(\u0026#34;Error: unable to use database!\u0026#34;) sql = \u0026#34;SELECT * from RESTAURANT where username = \u0026#39;{}\u0026#39; and password=\u0026#39;{}\u0026#39;\u0026#34;.format(username, password) cursor.execute(sql) db.commit() res = cursor.fetchall() num = 0 for row in res: num = num + 1 # 如果存在该商家且密码正确 if num == 1: print(\u0026#34;登录成功！欢迎商家用户！\u0026#34;) msg = \u0026#34;done2\u0026#34; else: print(\u0026#34;您没有商家用户权限或登录信息出错。\u0026#34;) msg = \u0026#34;fail2\u0026#34; return render_template(\u0026#39;logIn.html\u0026#39;, messages=msg, username=username, userRole=userRole) elif userRole == \u0026#39;CUSTOMER\u0026#39;:#用户 cursor = db.cursor() try: cursor.execute(\u0026#34;use appDB\u0026#34;) except: print(\u0026#34;Error: unable to use database!\u0026#34;) sql = \u0026#34;SELECT * from CUSTOMER where username = \u0026#39;{}\u0026#39; and password=\u0026#39;{}\u0026#39;\u0026#34;.format(username, password) cursor.execute(sql) db.commit() res = cursor.fetchall() num = 0 for row in res: num = num + 1 # 如果存在该用户且密码正确 if num == 1: print(\u0026#34;登录成功！欢迎用户！\u0026#34;) msg = \u0026#34;done3\u0026#34; else: print(\u0026#34;您没有用户权限，未注册或登录信息出错。\u0026#34;) msg = \u0026#34;fail3\u0026#34; return render_template(\u0026#39;logIn.html\u0026#39;, messages=msg, username=username, userRole=userRole) ","date":"2024-11-11T14:37:00+08:00","permalink":"https://1878247293.github.io/p/%E5%A4%96%E5%8D%96%E8%AE%A2%E9%A4%90%E7%B3%BB%E7%BB%9F-%E4%BA%8C/","title":"外卖订餐系统-（二）"},{"content":"一. 项目描述\n​\t本项目用于数据库实验课选做项目的大作业，基于python实现外卖订餐系统\n二. 代码讲解：\n1 2 3 4 5 6 7 from flask import Flask, render_template, request, redirect, url_for, flash from werkzeug.utils import secure_filename import pymysql import os import argparse import sys import importlib 代码引入了 Flask（用于创建 Web 应用）、render_template（渲染 HTML 页面）、request（处理请求）、redirect 和 url_for（页面跳转）、flash（闪现消息）、secure_filename（用于安全保存上传的文件名），以及 pymysql（用于连接和操作 MySQL 数据库）。\n1 2 3 4 # 重新加载sys模块配置 importlib.reload(sys) app = Flask(__name__) importlib.reload(sys)：重新加载 sys 模块，通常用于确保加载的是最新版本，或者在修改模块时使用。\napp = Flask(__name__)：创建一个 Flask 应用实例，__name__ 用于确定应用的根路径，方便管理路由和静态文件。\n1 2 3 4 # MySQL配置变量 mysql_pwd = \u0026#34;6021123456\u0026#34; db_name = \u0026#34;appdb\u0026#34; port = 3340 用于数据库连接的配置信息，依次是我的密码，数据库名和mysql的端口号\n1 2 3 4 # 全局变量 username = \u0026#34;\u0026#34; userRole = \u0026#34;\u0026#34; notFinishedNum = 0 全局变量，用来处理总体的信息\nusername变量的赋值\n方法1：全局变量实现，随登录进行修改 方法2：给每个页面传递username\n1 2 3 4 5 6 7 # 设置文件上传目录和允许的扩展名 UPLOAD_FOLDER = \u0026#39;/static/images/\u0026#39; ALLOWED_EXTENSIONS = set([ \u0026#39;png\u0026#39;, \u0026#39;jpg\u0026#39;, \u0026#39;jpeg\u0026#39;]) # 检查上传文件的扩展名是否合法 def allowed_file(filename): return \u0026#39;.\u0026#39; in filename and \\ filename.rsplit(\u0026#39;.\u0026#39;, 1)[1] in ALLOWED_EXTENSIONS 设置文件上传目录和允许的扩展名\n检查上传文件的扩展名是否合法\n","date":"2024-11-11T14:22:00+08:00","permalink":"https://1878247293.github.io/p/%E5%A4%96%E5%8D%96%E8%AE%A2%E9%A4%90%E7%B3%BB%E7%BB%9F-%E4%B8%80/","title":"外卖订餐系统-（一）"},{"content":"一. 问题描述\n删除文件的时候只能永久删除，而无法放入回收站。\n二.解决方法：\n查阅大量资料后，最终的方法如下：\n​\t1.使用 Windows + R 快捷键打开「运行」对话框，执行 control folders 命令打开「文件夹选项」，有的 Windows 版本中也叫「文件资源管理器选项」。\n​\t2.切换到「查看」菜单，在「高级设置」中： 取消勾选「隐藏受保护的操作系统文件（推荐）」 选择「显示隐藏的文件、文件夹和驱动器」。 设置文件资源管理器选项 。\n​\t3.点击「确定」应用并关闭窗口。\n​\t4.打开C盘和D盘的文件夹，分别将$recycle.bin 文件夹删掉（运行回收站的时候会自动生成这个文件夹，所以不用担心）\n","date":"2024-11-10T22:26:00+08:00","permalink":"https://1878247293.github.io/p/%E5%9B%9E%E6%94%B6%E7%AB%99%E6%97%A0%E6%B3%95%E6%94%BE%E5%85%A5%E6%96%87%E4%BB%B6/","title":"回收站无法放入文件"},{"content":"一. 实习总结\n本次实习完成的任务是通过java代码来实现对krb5的调用、获取TGT以及能手动更改TGT的有效时间。\n二. 实习收获：\n作为第一次的实习，大部分时间都用来熟悉工作环境和工作流程以及查阅一些关于krb5的资料。\n通过本次实习，我了解到了：\n如何ssh远程调用虚拟机来进行调试\nGit的提交和推送操作\nNginx对Restful API接口进行https的操作处理\n了解到了大致的工作分工的模式以及情况\n对于工作之间的交接和交流也有了一定的经验\n三. 实习所学到的知识：\n学到了如下：\n初步了解到了javaweb关于后端和redis、mysql（crud）的相关知识\n初步了解到springboot框架、restful接口以及对他们的使用经验\n实操的git的常用操作\n实操了JWT的操作\n对于nginx也有了初步的认识和使用经验\n学会了idea通过ssh进行远程操作的步骤\n四．工具详情：\n通过提供用户的用户名和密码、以及邮箱和TGT的有效时间等等可以获取到krb5的TGT。\n难点分析：\n相比于其它热门知识来讲，网上资料过少，了解的难度过大\n设置TGT的有效时间时，这里通过创建临时文件的方式，但却存在补充下加载配置的问题。最后查阅了多天的资料后，以及不断的尝试，发现的解决的方法（jaas.conf）\n","date":"2024-11-10T20:50:00+08:00","permalink":"https://1878247293.github.io/p/java%E8%BF%9C%E7%A8%8B%E9%93%BE%E6%8E%A5krb5/","title":"Java远程链接krb5"},{"content":"正文测试 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。\n奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。\n引用 思念是最暖的忧伤像一双翅膀\n让我停不了飞不远在过往游荡\n不告而别的你 就算为了我着想\n这么沉痛的呵护 我怎么能翱翔\n最暖的憂傷 - 田馥甄\n图片 1 2 3 ![Photo by Florian Klauer on Unsplash](florian-klauer-nptLmg6jqDo-unsplash.jpg) ![Photo by Luca Bravo on Unsplash](luca-bravo-alS7ewQ41M8-unsplash.jpg) ![Photo by Helena Hertz on Unsplash](helena-hertz-wWZzXlDpMog-unsplash.jpg) ![Photo by Hudai Gayiran on Unsplash](hudai-gayiran-3Od_VKcDEAA-unsplash.jpg) 相册语法来自 Typlog\n","date":"2020-09-09T00:00:00Z","image":"https://1878247293.github.io/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash_hu4699868770670889127.jpg","permalink":"https://1878247293.github.io/p/test-chinese/","title":"Chinese Test"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"https://1878247293.github.io/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hu6307248181568134095.jpg","permalink":"https://1878247293.github.io/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\nExierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\nComas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et Vagus elidunt The Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"2019-03-09T00:00:00Z","image":"https://1878247293.github.io/p/placeholder-text/matt-le-SJSpo9hQf7s-unsplash_hu10664154974910995856.jpg","permalink":"https://1878247293.github.io/p/placeholder-text/","title":"Placeholder Text"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: 1 2 3 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTeX globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTeX on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Inline math: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\nBlock math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","date":"2019-03-08T00:00:00Z","permalink":"https://1878247293.github.io/p/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil:\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3 .emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; } ","date":"2019-03-05T00:00:00Z","image":"https://1878247293.github.io/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_hu5876398126655421130.jpg","permalink":"https://1878247293.github.io/p/emoji-support/","title":"Emoji Support"}]